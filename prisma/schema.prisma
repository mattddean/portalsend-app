// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  oauth_token_secret String?  @db.Text
  oauth_token        String?  @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                         String    @id @default(cuid())
  name                       String?
  email                      String?   @unique
  emailVerified              DateTime?
  image                      String?
  // RSA private key exported as JWK, encrypted with AES, then base64 encoded
  encrypted_private_key      String?   @db.Text
  // Initialization vector used to encrypt encrypted_private_key with AES, base64 encoded
  encrypted_private_key_iv   String?   @db.Text
  // Salt used to encrypt encrypted_private_key with AES, base64 encoded
  encrypted_private_key_salt String?   @db.Text
  // RSA public key exported as JWK then base64 encoded
  public_key                 String?   @db.Text
  created_at                 DateTime  @default(now())
  updated_at                 DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  file_accesses FileAccess[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([identifier, token])
}

// Stores the permission that a user has to a file along with the shared key that the user can use
// to access the file.
model FileAccess {
  id              String     @id @default(cuid())
  user_id         String
  shared_key_id   String
  permission      Permission
  original_sender Boolean
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  user       User      @relation(fields: [user_id], references: [id])
  shared_key SharedKey @relation(fields: [shared_key_id], references: [id])

  @@index([user_id])
  @@index([shared_key_id])
}

// One key in a shared key set.
model SharedKey {
  id                String   @id @default(cuid())
  // Key encrypted with the owning user's public key, base64 encoded.
  encrypted_key     String   @db.Text
  shared_key_set_id String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  shared_key_set SharedKeySet @relation(fields: [shared_key_set_id], references: [id])
  file_accesses  FileAccess[]

  @@index([shared_key_set_id])
}

// A set of AES keys encrypted for different users which all decrypt to the same key.
model SharedKeySet {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  shared_keys SharedKey[]
  files       File[]
}

model File {
  id                String   @id @default(cuid())
  // S3 key
  storage_key       String   @default(cuid())
  // Initialization vector used to encrypt the file and its name, base64 encoded
  iv                String   @db.Text
  // URL slug that will serve as the file's download page
  slug              String   @unique @default(cuid())
  // Display name of the file, including its extension if given
  name              String?  @db.Text
  // Encrypted display name of the file, including its extension if given, base64 encoded
  encrypted_name    String?  @db.Text
  shared_key_set_id String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  shared_key_set SharedKeySet @relation(fields: [shared_key_set_id], references: [id])

  @@index([shared_key_set_id])
}

enum Permission {
  OWNER
  // EDITOR // TODO: add functionality around this permission
  VIEWER
}
